PHP设计模式之一，单例模式，顾名思义就是只有一个实例。单例模式确保某一个类只有一个实例，不能重复实例，只能它自己实例化，而且向整个系统提供这个实例。

三私一公：私有化静态属性，私有化构造方法，私有化克隆方法，公有化静态方法。

单例模式：即一个类只被实例化一次，当其他人对其再次实例化时，返回第一次实例化的对象，可以避免大量的new 操作，减少资源的消耗，典型应用于数据库类的实例化。


以实例化一个Mysql数据库类为例：
要实现一个类只实例化一次，就必须堵住其他实例化的入口。
1.实例化类时，会自动调用类的构造方法，因为将构造方法设置为private属性，限制为只能在类内部实例化

//私有构造方法，防止在类的外部实例化
private function __construct() {
    # code...
}
2.定义一个静态方法，在类内部实例化对象。实例化前先判断该类是否已被实例化了，若已被实例化，就返回该实例化对象；若没被实例化，便实例化一个对象并将该对象保存在类的静态属性中

//私有静态属性，存放该类的实例
private static $instance = null;
 
//公共的静态方法，实例化该类本身，只实例化一次
public static function getInstance() {
 
    if (!self::$instance instanceof self) {
 
       self::$instance = new self;
    }
 
    return self::$instance;
 
}
3.禁止克隆，对象之间进行克隆可生成不同的对象。而克隆时会自动调用类的__conle方法，因此将克隆方法设置为private属性

//私有克隆方法，防止克隆
private function __clone(){
    # code...
}
综上，三私一公（三个私有属性和一个公共方法）单例模式的代码如下：

class DB
{
    private static $instance = null; //私有静态属性，存放该类的实例
 
    private function __construct() //私有构造方法，防止在类的外部实例化
    {
        # code...
    }
 
 
    private function __clone() //私有克隆方法，防止克隆
    {
        # code
    }
 
 
    public static function getInstance() //公共的静态方法，实例化该类本身，只实例化一次
    {
        if (!self::$instance instanceof self) {
            self::$instance = new self;
        }
        return self::$instance;
    }
}
推荐教程：
--------------------- 
作者：No.1117 
来源：CSDN 
原文：https://blog.csdn.net/qq_29920751/article/details/87693687 
版权声明：本文为博主原创文章，转载请附上博文链接！




PHP 工厂模式
一、什么是工厂模式？

　　一个类通过本身的静态方法来，实例化一个类并返回一个实例对象；

 

二、工厂模式特点？

　　类命名特点：nameFactory  eg:  class mysqlFactory{}  【这是为了规范，当然也去起其他任意名字】

　　静态方法名称：static public function  factory($class_name){} 【静态方法是类与外界的接口， 返回的是一个对象】

 

三、优点？

　　如果已经使用的类内部发生改变，哪不需要在所有的地方都改变，只需要在类工厂类里改变既可，

　　　比如：连接数据库，可以使用mysql 、mysqli、pdo，根据不同参数配置使用不同的数据库操作类

 

四、应用场景

做支付接口的时候，未来可能对应不同的支付网关：支付宝、财付通、网银在线等。
方便未来扩展,设计成工厂模式。定一个专门生产网关接口的工厂，抽象出来,
做成接口形式，让所有的子类都要实现它的接口。
以后加一个支付方式，要使用哪一种支付方式，改变一下参数即可。

在为用户注册的时候，分为很多种角色的用户。
比如册用户，匿名用户、管理员用户等。完全使用可以使用工厂的思想来实现,
代码也容易维护,为每种角色可以生成操作的类等等。

系统对接多个不同类型的数据库，mysql，oracle，sqlserver

 

五、代码实例；


interface  mysql{
 
    public function connect();
}
 
class mysqli2  implements mysql{
 
    public  function connect(){
        echo 'mysqli';
    }
}
 
class pdo2 implements mysql{
 
    public function connect(){
        echo 'pdo';
    }
}
 
 
class mysqlFactory{
 
 
    static public function factory($class_name){
        return new $class_name();
    }
 
}
 
$obj = mysqlFactory::factory('pdo2');
$obj->connect();

