原文地址：https://blog.csdn.net/weixin_40747545/article/details/89387446

转载自阮一峰老师的博客（为了印象深刻，自己又手动码了一遍）
OAuth 2.0 的四种方式

OAuth 2.0
简单解释：
OAuth 2.0 是目前最流行的授权机制。数据的所有者告诉系统，同意授权第三方应用进入系统，获取这些数据。系统从而产生一个短期的进入令牌（token），
用来代替密码，供第三方应用使用。
OAuth 引入了一个授权层，用来分离两种不同的角色：客户端和资源所有者。资源所有者同意以后，资源服务器可以向客户端颁发令牌，客户端通过令牌去请求数据。

令牌与密码（token && password）
token和password的作用是一样的，都可以进入系统，但是有三点差异。

令牌是短期的，到期会自动失效，用户自己无法修改。密码一般是长期的，用户不修改，就不会发生变化。
令牌可以被数据所有者撤销，会立即失效。例如屋主可随时取消快递员的令牌。密码一般不允许被他人撤销。
令牌有权限范围（scope），比如快递员只能进小区的二号门。对于网络服务来说，只读令牌比读写令牌更安全。密码一般是完整权限。
四种授权类型(authorization grant)

授权码(authorization-code)
隐藏式(implicit)
密码式(password)
客户端凭证(client credentials)
注意
不管哪一种授权方式，第三方应用申请令牌之前，都必须先到系统备案，说明自己的身份，然后会拿到两个身份识别码：客户端ID（client ID）和客户端密钥
（client secret）。这是为了防止令牌被滥用，没有备案过的第三方应用，是不会拿到令牌的。

第一种授权方式：授权码
授权码方式，指的是第三方应用先申请一个授权码，再用该码获取令牌。
这种方式是最常用的，也是安全性最高的流程，适用于有后端的web应用。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。
这样的前后端分离，可以避免令牌泄露。

第一步
A网站提供一个连接，用户点击后就会跳转到B网站，授权用户数据给A使用。下面就是A网站跳转B网站的一个示意链接。

https://b.com/oauth/authorize?
response_type=code&
client_id=CLIENT_ID&
redirect_uri=CALLBACK_URL&
scope=read

上面URL中，response_type参数表示要求返回授权码(code)，client_id参数让B知道是谁在请求，redirect_uri参数是B接受或拒绝请求后的跳转网址，
scope参数表示要求的授权范围(“read”表示“只读”)。
第二步
用户跳转后，B网站会要求用户登录，然后询问是否同意给予A网站授权。用户表示同意，这时B网站就会跳回redirect_uri参数指定的网址。跳转时，会传回一个
授权码，如下所示。

https://a.com/callback?code=AUTHORIZATION_CODE

上面的URL中，code就是授权码。
第三步
A网站拿到授权码后，就可以在后端向B网站请求令牌。

https://b.com/oauth/token?
client_id=CLIENT_ID&
client_secret=CLIENT_SECRET&
grant_type=authorization_code&
code=AUTHORIZATION_CODE&
redirect_uri=CALLBACK_URL

上面的URL中，client_id参数和client_secret参数用来让B确认A的身份（client_secret参数是保密的，因此只能在后端发请求），grant_type参数的
值是AUTHORIZATION_CODE，表示采用的方式是授权码，code参数是上一步拿到的授权码，redirect_uri参数是令牌颁发后的回调网址。
第四步
B网站收到请求后，颁发令牌。具体的做法是向redirect_uri指定的网址发送一段JSON数据。

{
   "access_token":"ACCESS_TOKEN",
   "token_type":"bearer",
   "expires_in":2592000,
   "refresh_token":"REFERSH_TOKEN",
   "scope":"read",
   "uid":100101,
   "info":{...}
} 

上面JSON数据中，access_token字段就是令牌，A网站在后端拿到了。

第二种方式：隐藏式
有些web是纯前端应用，没有后端。这时必须将令牌储存在前端。这种方式没有授权码这个中间步骤，所以称为（授权码）“隐藏式”（implicit）。

第一步
A网站提供一个链接，要求用户跳转到B网站，授权用户数据给A网站使用。

https://b.com/oauth/authorize?
response_type=token&
client_id=CLIENT_ID&
redirect_uri=CALLBACK_URL&
scope=read

上面URL中，response_type参数为token，表示要求直接返回令牌。
第二步
用户跳转到B网站，登陆后同意给予A网站授权，这时B网站就会跳转到redirect_uri参数指定的跳转网址，并且把令牌作为URL参数，传给A网站。

https://a.com/callback#token=ACCESS_TOKEN
1
上面URL中，token参数就是令牌，A网站因此直接在前端拿到令牌。
这种方式把令牌直接传给前端是很不安全的。因此只能用于一些安全要求不高的场景，并且令牌的有效期必须非常短，通常就是会话期间（session）有效，
浏览器关掉令牌就失效了。

第三种方式：密码式
如果高度信任某个应用，也允许用户把用户名和密码直接告诉该应用。该应用就使用你的密码，申请令牌，这种方式成为“密码式”（password）。
第一步
A网站要求用户提供B网站的用户名和密码。拿到以后，A就直接向B请求令牌。

https://oauth.b.com/token?
grant_type=password&
username=USERNAME&
password=PASSWORD&
client_id=CLIENT_ID

上面URL中，grant_type参数是授权方式，这里的password表示“密码式”，username和password是B的用户名和密码。
第二步
B网站验证身份通过后，直接给出令牌。注意，这是不需要跳转，而是把令牌放在JSON数据里面，作为HTTP回应，A因此拿到令牌。

第四种方式：凭证式
适用于没有前端的命令行应用，即在命令行下请求令牌。
第一步
A应用在命令行中向B发出请求。

https://oauth.b.com/token?
grant_type=client_crdentials&
client_id=CLIENT_ID&
client_secret=CLIENT_SECRET

上面的URL中，grant_type参数等于client_credentials表示采用凭证式，client_id和client_secret用来让B确认A的身份。
第二步
B网站验证通过后，直接返回令牌。
这种方式给出的令牌是针对第三方应用的，而不是针对用户的，即有可能多个用户共享同一个令牌。

令牌的使用
A网站拿到令牌之后，就可以向B网站的API请求数据了。此时每个发到API的请求，都必须带有令牌。具体的做法是在请求的头信息加上一个Authorization字段，
令牌就放在这个字段里。

更新令牌
令牌的有效期到了， 如果让用户重新走一遍上面的流程，再申请一个新的令牌，很可能体验不好，而且没有必要。OAuth 2.0允许用户自动更新令牌。具体方法是：
B网站颁发令牌的时候，一次性颁发两个令牌，一个用于获取数据，另一个用于获取新的令牌（refresh token字段）。令牌到期前，用户使用refresh token发
一个请求，去更新令牌。

https://b.com/oauth/token?
grant_type=refresh_token&
client_id=CLIENT_ID&
client_secret=CLIENT_SECRET&
refresh_token=REFRESH_TOKEN

上面的URL中，grant_type参数为refresh_token表示要求更新令牌，client_id和client_secret参数用于确认身份，refresh_token参数就是用于更新
令牌的令牌。

