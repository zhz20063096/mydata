
一、冒泡排序（循环相邻位比较）
   思路分析：在要排序的一组数中，对当前还未排好的序列，从前往后对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即，每当两相邻的数
   比较后发现它们的排序与排序要求相反时，就将它们互换。
   代码实现：
   function bubbleSort($arr){
    　　$len = count($arr);
    　　$temp = 0; 
   　　 //外层控制排序轮次
    　　for($i=0; $i<$len-1; $i++){
        　　//内层控制每轮比较次数
        　　for($j=0; $j< $len-1-$i; $j++){
              　　if($arr[$j] > $arr[$j+1]){
                  　　$temp        = $arr[$j];
                  　　$arr[$j]     = $arr[$j+1];
                  　　$arr[$j+1]   = $temp;
             　　}
       　　 }
    　　} 
　　    return $arr;
     } 

二、选择排序（循环与最小位比较）
   思路分析：在要排序的一组数中，选出最小的一个数与第一个位置的数交换。然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后
   一个数比较为止。
   代码实现：
   function selectSort($arr){
       //定义中间变量
       $temp = 0;
       $len = count($arr);
       for($i=0; $i<$len-1; $i++){
           //定义最小位置
           $minIndex = $i;
           for($j= $i+1; $j<$len; $j++){
             if($arr[$j] < $arr[$minIndex]){
                 $minIndex = $j;
             }
           }
           if($i != $minIndex){
               $temp = $arr[$i];
               $arr[$i] = $arr[$minIndex];
               $arr[$minIndex] = $temp;     
           }
        }
        return $arr;
    }
    
    
三、插入排序（循环当前位与之前排好的位比较）
    思路分析：在要排序的一组数中，假设前面的数已经是排好顺序的，现在要把第n个数插到前面的有序数中，使得这n个数也是排好顺序的。如此反复循环，直到
    全部排好顺序。
    代码实现：
    function insertSort($arr) {
      $len=count($arr); 
      for($i=1, $i<$len; $i++) {
          $temp = $arr[$i];
          //内层循环控制，比较并插入
          for($j=$i-1;$j>=0;$j--) {
              if($temp < $arr[$j]) {
                  //发现插入的元素要小，交换位置，将后边的元素与前面的元素互换
                  $arr[$j+1] = $arr[$j];
                  $arr[$j] = $temp;
              } else {
                  //如果碰到不需要移动的元素，由于是已经排序好是数组，则前面的就不需要再次比较了。
                  break;
              }
          }
      }
      return $arr;
    }

四、快速排序（与当前位大小，分左右，再递归）
    思路分析：选择一个基准元素，通常选择第一个元素或者最后一个元素。通过一趟扫描，将待排序列分成两部分，一部分比基准元素小，一部分大于等于基准元素。
    此时基准元素在其排好序后的正确位置，然后再用同样的方法递归地排序划分的两部分。
    代码实现：
    function quickSort($arr) {
        //先判断是否需要继续进行
        $len = count($arr);
        if($len <= 1) {
            return $arr;
        }
        //选择第一个元素作为基准
        $middle = $arr[0];
        //遍历除了标尺外的所有元素，按照大小关系放入两个数组内
        //初始化两个数组
        $left = $array();  //小于基准的
        $right = array();  //大于基准的
        for($i=1; $i<$len; $i++) {
            if($middle > $arr[$i]) {
                //放入左边数组
                $left[] = $arr[$i];
            } else {
                //放入右边
                $right[] = $arr[$i];
            }
        }
        //再分别对左边和右边的数组进行相同的排序处理方式递归调用这个函数
        $left = quickSort($left);
        $right = quickSort($right);
        //合并
        return array_merge($left, array($middle), $right);
    }
    
    
  数组全排列算法（递归组合）：  
  $arrStr="0123456789abcdefghijklmnopqrstuvwxyz";
  //$arrStr = "12345";
  $arr=str_split($arrStr); 
  $strMin=3; 
  $strMax=5;
  $results=array();
  for($i=$strMin; $i<=$strMax; $i++){
      makeDic('', $arr, $i, 1, $results);
  }
  print_r($results);
  
  function makeDic($strFirst, $arr, $strMin, $tmp, &$results){
      for($i=0; $i<count($arr); $i++){
          if($tmp == $strMin){
              $results[] = $strFirst.$arr[$i];
          } else {
              makeDic($strFirst.$arr[$i], $arr, $strMin, $tmp+1, $results);
          }
       }
  }
  
  
  数组求定和（递归相减，循环尝试）：
  $_arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);
  $results = array();
  for($t = 0; $t < count($_arr); $t++){
      getSetBySum($_arr, 30, $t, 30);
  }
  print_r($results);exit;
  
  function getSetBySum($_array, $_sum, $_index, $_current, $_return=''){
      global $results;
      for($i = $_index; $i < count($_array); $i++){
          if($_current - $_array[$i] == 0 && $_sum - $_array[$i] == 0){  //找到一个
              $_return .= $_array[$i].'<br/>';
              $results[] = $_return;
          }else if($_current - $_array[$i] > 0 ){ //继续找
              $_return .= $_array[$i].'+';
              $_sum -= $_array[$i];
              for( $j = $i+1; $j < count($_array); $j++){
                  getSetBySum($_array, $_sum, $j, $_current - $_array[$i], $_return);
              }
          }
      }
  }
 
    
    
    
    
    
    
    
    
    
    
     
